version: 2.1

orbs:
  artifactory: jfrog/artifactory-orb@1.0.1
  aws-cli: circleci/aws-cli@3.1.4
  ggshield: gitguardian/ggshield@1.1.4
  serverless-framework: circleci/serverless-framework@2.0.1
  snyk: snyk/snyk@1.4.0

workflows:
  build_and_deploy:
    jobs:
      - ggshield/scan:
          name: secrets_detection
          revision: $CIRCLE_SHA1
          context:
            - dobra
      - static_analysis:
          name: sast-<< matrix.service >>
          context:
            - dobra
          matrix:
            parameters:
              service:
                - inventory
                - cart
                - wishlist
          requires:
            - secrets_detection
      - test:
          name: test-<< matrix.service >>
          matrix:
            parameters:
              service:
                - inventory
                - cart
                - wishlist
          requires:
            - sast-<< matrix.service >>
      - build:
          name: build-<< matrix.service >>
          context:
            - dobra
          matrix:
            parameters:
              service:
                - inventory
                - cart
                - wishlist
          requires:
            - test-<< matrix.service >>
      - deploy:
          name: deploy-<< matrix.service >>
          context:
            - dobra
          matrix:
            parameters:
              service:
                - inventory
                - cart
                - wishlist
          requires:
            - build-<< matrix.service >>
        
jobs:
  build:
    parameters:
      service:
        type: string
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - run:
          name: Build JAR
          command: |
            cd << parameters.service >> 
            mvn -U clean package
      - run:
          name: Install JFrog CLI
          command: curl -fL https://install-cli.jfrog.io | sh
      - run:
          name: Upload JAR to Artifactory
          command: |
            cd << parameters.service >>/target
            jf rt upload "*.jar" default-generic-local --url $ARTIFACTORY_URL --access-token $ARTIFACTORY_API_KEY
      - store_artifacts:
          path: << parameters.service >>/target
      - persist_to_workspace:
          root: << parameters.service >>
          paths: 
            - target

  static_analysis:
    parameters:
      service:
        type: string
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - snyk/scan:
          severity-threshold: critical
          target-file: << parameters.service >>/pom.xml
  test:
    parameters:
      service:
        type: string
    docker:
      - image: cimg/openjdk:11.0
    steps:
      - checkout
      - run:
          name: Run unit tests
          command: |
            mkdir -p << parameters.service >>/src/test/java/com/scale_aws/test
            cd << parameters.service >>/src/test/java/com/scale_aws/test
            mvn test
  deploy:
    parameters:
      service:
        type: string
    executor: serverless-framework/default
    steps:
      - checkout
      - aws-cli/setup:
          role-arn: $AWS_ROLE_ARN_DEVOPSBOX_SERVERLESS
      - serverless-framework/setup
      - attach_workspace:
          at: << parameters.service >>
      - run:
          name: Deploy to AWS Lambda
          command: |
            cd << parameters.service >>
            serverless deploy --conceal --verbose --region $AWS_DEFAULT_REGION
      - run:
          name: Delete CloudFormation stack
          when: on_fail
          command: |
            cd << parameters.service >>
            serverless remove --verbose --region $AWS_DEFAULT_REGION
